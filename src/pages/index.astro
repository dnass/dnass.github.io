---
import Layout from '@layouts/Layout.astro';
import Card from '@components/Card.astro';
import Filters from '@components/Filters.astro';
import Year from '@components/Year.astro';
import { getFilterItems } from '@utils/getFilterItems';
import { getCollection } from 'astro:content';

const allProjects = (await getCollection('project'))
  .map(({ data }) => ({
    ...data,
    date: new Date(`${data.date} `),
    year: data.date.slice(0, 4),
  }))
  .sort(({ date: a }, { date: b }) => (b > a ? 1 : b < a ? -1 : 0));

const yearIndices = new Map(
  [...new Set(allProjects.map(({ year }) => year))].map((y) => [
    allProjects.findIndex(({ year }) => year === y),
    y,
  ]),
);

const filters = [
  {
    label: 'Publications',
    items: getFilterItems(allProjects, 'publications'),
  },
  {
    label: 'Technologies',
    items: getFilterItems(allProjects, 'technologies'),
  },
  {
    label: 'Roles',
    items: getFilterItems(allProjects, 'roles'),
  },
];
---

<Layout title='Daniel Nass ⫸ Portfolio'>
  <main class='mx-auto mt-24 grid max-w-7xl grid-cols-5 gap-5 p-4'>
    <div
      class='text-theme-100 col-span-full mb-12 text-center font-serif md:col-span-3 md:col-start-2'
    >
      <h1 class='mb-1 text-7xl font-extrabold'>Daniel Nass</h1>
      <h2 class='mb-2 text-3xl font-bold'>News ⫸ Data ⫸ Graphics ⫸ Code</h2>
    </div>
    <div class='col-span-full mb-48 grid grid-cols-subgrid gap-y-5'>
      <Filters filters={filters} />
      <div class='col-span-full mb-44 grid grid-cols-subgrid gap-y-5'>
        {
          allProjects.map((proj, i) => (
            <>
              <Year value={yearIndices.get(i)} />
              <Card {...proj} lazy={i > 3} />
            </>
          ))
        }
      </div>
    </div>
  </main>
</Layout>

<script>
  const years = document.querySelectorAll<HTMLElement>('[data-year]');

  const ramp = () => {
    const h = window.innerHeight;

    years.forEach((el) => {
      const { top, height } = el.getBoundingClientRect();
      const offset = Math.abs((top + height / 2 - h / 2) / (h / 2)) - 0.25;
      const val = 1 - Math.max(0, Math.min(1, offset));
      el.style.setProperty('--ramp', val.toString());
    });
  };

  document.addEventListener('scroll', ramp);
  document.addEventListener('resize', ramp);
  document.addEventListener('filter', ramp);
  ramp();
</script>
